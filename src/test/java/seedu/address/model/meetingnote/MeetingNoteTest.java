package seedu.address.model.meetingnote;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NOTE_AMY;
import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NOTE_CREATED_BY_AMY;
import static seedu.address.testutil.Assert.assertThrows;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.junit.jupiter.api.Test;

public class MeetingNoteTest {

    private static final String INVALID_DATE = "2025/10/23 12:00"; // wrong format

    @Test
    public void constructor_null_throwsNullPointerException() {
        assertThrows(NullPointerException.class, () -> new MeetingNote(null, VALID_MEETING_NOTE_AMY));
        assertThrows(NullPointerException.class, () -> new MeetingNote(VALID_MEETING_NOTE_AMY, null));
    }

    @Test
    public void constructor_invalidNote_throwsIllegalArgumentException() {
        String invalidNote = "";
        assertThrows(IllegalArgumentException.class, () -> new MeetingNote(invalidNote,
                VALID_MEETING_NOTE_CREATED_BY_AMY));
    }

    @Test
    public void constructor_invalidDate_throwsDateTimeParseException() {
        assertThrows(Exception.class, () -> new MeetingNote(VALID_MEETING_NOTE_AMY, INVALID_DATE));
    }

    @Test
    public void isValidNote() {
        // null note
        assertThrows(NullPointerException.class, () -> MeetingNote.isValidNote(null));

        // invalid empty note
        assertFalse(MeetingNote.isValidNote(""));

        // invalid note more than 200 characters
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 201; i++) {
            sb.append('A');
        }
        assertFalse(MeetingNote.isValidNote(sb.toString()));

        // invalid note containing nonbasic printable ASCII character
        assertFalse(MeetingNote.isValidNote("Ä‡"));
        assertFalse(MeetingNote.isValidNote("\nNewline not allowed"));
        assertFalse(MeetingNote.isValidNote("Emoji ðŸ˜ƒ not allowed"));


        // valid note
        assertTrue(MeetingNote.isValidNote("Discussed policy renewal and add-on coverage."));
    }

    @Test
    public void constructor_successfulMeetingNote() {
        MeetingNote note = new MeetingNote(VALID_MEETING_NOTE_AMY, VALID_MEETING_NOTE_CREATED_BY_AMY);
        assertEquals(VALID_MEETING_NOTE_AMY, note.getNote());

        LocalDateTime expectedDate = LocalDateTime.parse(VALID_MEETING_NOTE_CREATED_BY_AMY,
                DateTimeFormatter.ofPattern(MeetingNote.DATE_PATTERN));
        assertEquals(expectedDate, note.getCreatedAt());
    }

    @Test
    public void autoGeneratedDate_isCloseToNow() {
        // simulate how the parser creates notes (with LocalDateTime.now())
        String currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(MeetingNote.DATE_PATTERN));
        MeetingNote note = new MeetingNote(VALID_MEETING_NOTE_AMY, currentTime);

        LocalDateTime createdAt = note.getCreatedAt();
        LocalDateTime now = LocalDateTime.now();

        // not in the future
        assertFalse(createdAt.isAfter(now));

        // within 60 seconds since seconds are truncated
        Duration diff = Duration.between(createdAt, now);
        assertTrue(diff.abs().getSeconds() < 60,
                "createdAt should be within 60s of now, diff = " + diff.getSeconds());
    }

    @Test
    public void checkHash_success() {
        MeetingNote meetingNote1 = new MeetingNote(VALID_MEETING_NOTE_AMY, VALID_MEETING_NOTE_CREATED_BY_AMY);
        MeetingNote meetingNote2 = new MeetingNote(VALID_MEETING_NOTE_AMY, VALID_MEETING_NOTE_CREATED_BY_AMY);
        assertEquals(meetingNote1.hashCode(), meetingNote2.hashCode());
    }

    @Test
    public void equals() {
        MeetingNote note = new MeetingNote(VALID_MEETING_NOTE_AMY, VALID_MEETING_NOTE_CREATED_BY_AMY);
        MeetingNote sameNote = new MeetingNote(VALID_MEETING_NOTE_AMY, VALID_MEETING_NOTE_CREATED_BY_AMY);
        MeetingNote differentNote = new MeetingNote("Different content", VALID_MEETING_NOTE_CREATED_BY_AMY);
        MeetingNote differentDate = new MeetingNote(VALID_MEETING_NOTE_AMY, "2025-12-31 10:00");
        MeetingNote noteAllCaps = new MeetingNote(VALID_MEETING_NOTE_AMY.toUpperCase(),
                VALID_MEETING_NOTE_CREATED_BY_AMY);

        // same values -> true
        assertTrue(note.equals(sameNote));

        // same object -> true
        assertTrue(note.equals(note));

        // null -> false
        assertFalse(note.equals(null));

        // different type -> false
        assertFalse(note.equals(""));

        // different note -> false
        assertFalse(note.equals(differentNote));

        // different date -> true
        assertTrue(note.equals(differentDate));

        // case-insensitive
        assertTrue(note.equals(noteAllCaps));
    }
}
